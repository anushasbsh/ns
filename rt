import java.util.*;
public class rte
{
public static void main(String[]args){
Scanner scanner=new Scanner(System.in);
System.out.print("Enter the message to encrypt: ");
String msg=scanner.nextLine().replaceAll("\\s","");
System.out.print("Enter the key (comma-separated numbers): ");
String[]keyInput=scanner.nextLine().split(",");
int[]key=Arrays.stream(keyInput).mapToInt(Integer::parseInt).toArray();
String cipher=encryptMessage(msg,key);
System.out.println("Encrypted Message: "+cipher);
scanner.close();
}
static String encryptMessage(String msg,int[]key){
int col=key.length;
int row=(int)Math.ceil((double)msg.length()/col);
char[][]matrix=new char[row][col];
int k=0;
for(int i=0;i<row;i++){
for(int j=0;j<col;j++){
if(k<msg.length()){
matrix[i][j]=msg.charAt(k);
}else{
matrix[i][j]='_'; }
k++;
}}
StringBuilder cipher=new StringBuilder();
for(int i=0;i<col;i++){
int colIndex=key[i]-1;
for(int j=0;j<row;j++){
cipher.append(matrix[j][colIndex]);
}}
return cipher.toString();
}}

import java.util.*;
public class rtd {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the encrypted message: ");
        String cipher = scanner.nextLine();
        System.out.print("Enter the key (comma-separated numbers): ");
        String[] keyInput = scanner.nextLine().split(",");
        int[] key = Arrays.stream(keyInput).mapToInt(Integer::parseInt).toArray();
        
        System.out.println("Decrypted Message: " + decryptMessage(cipher, key));
        scanner.close();
    }

    static String decryptMessage(String cipher, int[] key) {
        int col = key.length; // Fix: Use key.length instead of key.length()
        int row = (int) Math.ceil((double) cipher.length() / col);
        char[][] matrix = new char[row][col];
        int k = 0;

        for (int i = 0; i < col; i++) {
            int colIndex = key[i] - 1; 
            for (int j = 0; j < row && k < cipher.length(); j++) {
                matrix[j][colIndex] = cipher.charAt(k++);
            }
        }

        StringBuilder msg = new StringBuilder();
        for (int i = 0; i < row; i++)
            for (int j = 0; j < col; j++)
                if (matrix[i][j] != 0) msg.append(matrix[i][j]);

        return msg.toString();
    }
}
